<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Enhanced Video Chat</title>
    <script src="https://unpkg.com/peerjs@1.5.2/dist/peerjs.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary: #4285f4;
            --danger: #ea4335;
            --success: #34a853;
            --light: #f8f9fa;
            --dark: #212529;
        }
        
        body {
            font-family: 'Segoe UI', system-ui, sans-serif;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f7fa;
            color: var(--dark);
        }
        
        h1 {
            text-align: center;
            color: var(--primary);
            margin-bottom: 25px;
        }
        
        .control-panel {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 12px;
            margin-bottom: 20px;
        }
        
        @media (max-width: 768px) {
            .control-panel {
                grid-template-columns: 1fr;
            }
        }
        
        input {
            padding: 12px 15px;
            border: 1px solid #ced4da;
            border-radius: 8px;
            font-size: 16px;
            transition: all 0.2s;
            grid-column: span 2;
        }
        
        input:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(66, 133, 244, 0.25);
        }
        
        button {
            padding: 12px;
            border: none;
            border-radius: 8px;
            background: var(--primary);
            color: white;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }
        
        button:hover {
            filter: brightness(0.9);
            transform: translateY(-1px);
        }
        
        button:active {
            transform: translateY(0);
        }
        
        #disconnectBtn {
            background: var(--danger);
        }
        
        #status {
            padding: 12px 15px;
            margin: 15px 0;
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            font-weight: 500;
        }
        
        .video-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }
        
        .video-container {
            position: relative;
            background: black;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            aspect-ratio: 4/3;
        }
        
        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transform: rotateY(180deg);
            background: #000;
        }
        
        .video-label {
            position: absolute;
            bottom: 12px;
            left: 12px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 14px;
            z-index: 10;
        }
        
        .media-controls {
            position: absolute;
            bottom: 12px;
            right: 12px;
            display: flex;
            gap: 8px;
            z-index: 10;
        }
        
        .control-btn {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background: rgba(0, 0, 0, 0.6);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .control-btn:hover {
            background: rgba(0, 0, 0, 0.8);
            transform: scale(1.1);
        }
        
        .control-btn.active {
            background: var(--danger);
        }
        
        #chatContainer {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        
        #messages {
            height: 250px;
            overflow-y: auto;
            margin-bottom: 15px;
            padding: 10px;
            border: 1px solid #e9ecef;
            border-radius: 8px;
        }
        
        .message {
            margin-bottom: 12px;
            padding: 10px 15px;
            border-radius: 18px;
            max-width: 80%;
            animation: fadeIn 0.3s ease;
            position: relative;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(5px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .local-msg {
            background: var(--primary);
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 5px;
        }
        
        .remote-msg {
            background: #e9ecef;
            margin-right: auto;
            border-bottom-left-radius: 5px;
        }
        
        .system-msg {
            text-align: center;
            color: #6c757d;
            font-size: 0.9em;
            margin: 10px 0;
        }
        
        .msg-sender {
            font-weight: 600;
            font-size: 0.9em;
            margin-bottom: 4px;
        }
        
        .msg-time {
            font-size: 0.75em;
            opacity: 0.8;
            text-align: right;
            margin-top: 4px;
        }
        
        .hidden {
            display: none;
        }
        
        .chat-input-group {
            display: flex;
            gap: 12px;
        }
        
        #messageInput {
            flex-grow: 1;
            padding: 12px 15px;
            border-radius: 24px;
        }
        
        #sendBtn {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            padding: 0;
        }
        
        .notification {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background: var(--primary);
            color: white;
            padding: 12px 18px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 1000;
            animation: slideIn 0.4s ease-out, fadeOut 0.4s 2.6s forwards;
            display: flex;
            align-items: center;
            gap: 10px;
            max-width: 300px;
        }
        
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        @keyframes fadeOut {
            from { opacity: 1; }
            to { opacity: 0; }
        }
        
        .notification-icon {
            font-size: 1.2em;
        }
    </style>
</head>
<body>
    <h1><i class="fas fa-video"></i> Enhanced Video Chat</h1>
    
    <div class="control-panel">
        <input type="text" id="username" placeholder="Your name" value="You">
        <input type="text" id="roomId" placeholder="Room ID (leave empty to create new)">
        <button id="createBtn"><i class="fas fa-plus"></i> Create Room</button>
        <button id="joinBtn"><i class="fas fa-sign-in-alt"></i> Join Room</button>
        <button id="disconnectBtn" class="hidden"><i class="fas fa-phone-slash"></i> Disconnect</button>
    </div>
    
    <div id="status">Status: Ready to connect</div>
    
    <div class="video-grid">
        <div class="video-container">
            <video id="localVideo" autoplay muted></video>
            <div class="video-label">You</div>
            <div class="media-controls">
                <div class="control-btn" id="toggleVideo" title="Toggle Video (Ctrl+E)">
                    <i class="fas fa-video"></i>
                </div>
                <div class="control-btn" id="toggleAudio" title="Toggle Audio (Ctrl+D)">
                    <i class="fas fa-microphone"></i>
                </div>
            </div>
        </div>
        
        <div class="video-container hidden" id="remoteVideoContainer">
            <video id="remoteVideo" autoplay></video>
            <div class="video-label" id="remoteUsername">Connecting...</div>
        </div>
    </div>
    
    <div id="chatContainer" class="hidden">
        <div id="messages"></div>
        <div class="chat-input-group">
            <input type="text" id="messageInput" placeholder="Type your message...">
            <button id="sendBtn"><i class="fas fa-paper-plane"></i></button>
        </div>
    </div>

    <audio id="leaveSound" src="https://assets.mixkit.co/sfx/preview/mixkit-arcade-game-jump-coin-216.mp3" preload="auto"></audio>
    <audio id="messageSound" src="https://assets.mixkit.co/sfx/preview/mixkit-correct-answer-tone-2870.mp3" preload="auto"></audio>
    <audio id="joinSound" src="https://assets.mixkit.co/sfx/preview/mixkit-unlock-game-notification-253.mp3" preload="auto"></audio>

    <script>
        (function() {
            "use strict";
            
            // DOM Elements
            const elements = {
                localVideo: document.getElementById('localVideo'),
                remoteVideo: document.getElementById('remoteVideo'),
                remoteVideoContainer: document.getElementById('remoteVideoContainer'),
                remoteUsername: document.getElementById('remoteUsername'),
                status: document.getElementById('status'),
                messages: document.getElementById('messages'),
                messageInput: document.getElementById('messageInput'),
                sendBtn: document.getElementById('sendBtn'),
                username: document.getElementById('username'),
                roomId: document.getElementById('roomId'),
                createBtn: document.getElementById('createBtn'),
                joinBtn: document.getElementById('joinBtn'),
                disconnectBtn: document.getElementById('disconnectBtn'),
                chatContainer: document.getElementById('chatContainer'),
                toggleVideo: document.getElementById('toggleVideo'),
                toggleAudio: document.getElementById('toggleAudio')
            };

            // Sound elements
            const sounds = {
                leave: document.getElementById('leaveSound'),
                message: document.getElementById('messageSound'),
                join: document.getElementById('joinSound')
            };

            // App State
            const state = {
                peer: null,
                localStream: null,
                currentCall: null,
                dataConnection: null,
                isVideoOn: true,
                isAudioOn: true,
                remoteUserName: null,
                activeRoomId: null,
                qualityMonitorInterval: null
            };

            // Initialize the app
            async function init() {
                setupEventListeners();
                await initMediaDevices();
            }

            function setupEventListeners() {
                // Button events
                elements.createBtn.addEventListener('click', createRoom);
                elements.joinBtn.addEventListener('click', joinRoom);
                elements.disconnectBtn.addEventListener('click', disconnect);
                elements.sendBtn.addEventListener('click', sendMessage);
                elements.messageInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') sendMessage();
                });
                
                // Media control events
                elements.toggleVideo.addEventListener('click', toggleVideo);
                elements.toggleAudio.addEventListener('click', toggleAudio);
                
                // Keyboard shortcuts
                document.addEventListener('keydown', function(e) {
                    if (e.ctrlKey && e.key === 'e') toggleVideo();
                    if (e.ctrlKey && e.key === 'd') toggleAudio();
                });

                // Handle page visibility changes
                document.addEventListener('visibilitychange', function() {
                    if (document.hidden && state.localStream) {
                        state.localStream.getVideoTracks().forEach(function(track) {
                            track.enabled = false;
                        });
                    } else if (state.localStream) {
                        state.localStream.getVideoTracks().forEach(function(track) {
                            track.enabled = state.isVideoOn;
                        });
                    }
                });
            }

            async function initMediaDevices() {
                try {
                    const constraints = {
                        video: {
                            width: { ideal: 1280 },
                            height: { ideal: 720 },
                            frameRate: { ideal: 30 },
                            facingMode: 'user'
                        },
                        audio: {
                            echoCancellation: true,
                            noiseSuppression: true,
                            autoGainControl: true
                        }
                    };

                    state.localStream = await navigator.mediaDevices.getUserMedia(constraints);
                    elements.localVideo.srcObject = state.localStream;
                    updateStatus("Media devices ready");
                    
                    monitorConnectionQuality();
                    
                } catch (err) {
                    console.error("Media error:", err);
                    updateStatus("Error accessing media: " + err.message);
                    
                    try {
                        state.localStream = await navigator.mediaDevices.getUserMedia({ audio: true });
                        elements.localVideo.srcObject = null;
                        updateStatus("Audio-only mode (camera access denied)");
                    } catch (audioErr) {
                        updateStatus("Couldn't access any media devices");
                        elements.createBtn.disabled = true;
                        elements.joinBtn.disabled = true;
                    }
                }
            }

            function monitorConnectionQuality() {
                if (state.qualityMonitorInterval) {
                    clearInterval(state.qualityMonitorInterval);
                }
                
                state.qualityMonitorInterval = setInterval(function() {
                    if (!state.currentCall) {
                        clearInterval(state.qualityMonitorInterval);
                        return;
                    }
                }, 5000);
            }

            function generateRoomId() {
                return 'room-' + Math.random().toString(36).substr(2, 9);
            }

            function createRoom() {
                if (!state.localStream) {
                    alert("Please allow camera/microphone access first");
                    return;
                }
                
                let roomId = elements.roomId.value.trim();
                if (!roomId) {
                    roomId = generateRoomId();
                    elements.roomId.value = roomId;
                }
                
                state.activeRoomId = roomId;
                state.peer = new Peer(roomId, {
                    config: { 
                        iceServers: [
                            { urls: 'stun:stun.l.google.com:19302' },
                            { urls: 'stun:stun1.l.google.com:19302' },
                            { urls: 'stun:stun2.l.google.com:19302' }
                        ]
                    },
                    debug: 2
                });
                
                state.peer.on('open', function(id) {
                    updateStatus("Room created: " + roomId);
                    toggleUI(true);
                    clearChat();
                    
                    state.peer.on('call', function(call) {
                        state.currentCall = call;
                        call.answer(state.localStream);
                        
                        call.on('stream', function(remoteStream) {
                            handleRemoteStream(remoteStream);
                        });
                        
                        call.on('close', function() {
                            handleRemoteDisconnect();
                        });
                        
                        call.on('error', function(err) {
                            console.error('Call error:', err);
                            updateStatus("Call error: " + err.message);
                        });
                    });
                    
                    state.peer.on('connection', function(conn) {
                        state.dataConnection = conn;
                        setupDataConnection();
                    });
                });
                
                state.peer.on('error', function(err) {
                    console.error('Peer error:', err);
                    updateStatus("Error: " + err.message);
                    
                    if (err.type === 'unavailable-id') {
                        const newRoomId = generateRoomId();
                        elements.roomId.value = newRoomId;
                        updateStatus("Room ID taken - trying new one: " + newRoomId);
                        createRoom();
                    }
                });
            }

            function joinRoom() {
                if (!state.localStream) {
                    alert("Please allow camera/microphone access first");
                    return;
                }
                
                const roomId = elements.roomId.value.trim();
                if (!roomId) {
                    alert("Please enter a room ID to join");
                    return;
                }
                
                state.activeRoomId = roomId;
                state.peer = new Peer({
                    config: { 
                        iceServers: [
                            { urls: 'stun:stun.l.google.com:19302' },
                            { urls: 'stun:stun1.l.google.com:19302' },
                            { urls: 'stun:stun2.l.google.com:19302' }
                        ]
                    },
                    debug: 2
                });
                
                state.peer.on('open', function(id) {
                    updateStatus("Joining room: " + roomId);
                    toggleUI(true);
                    clearChat();
                    
                    state.currentCall = state.peer.call(roomId, state.localStream);
                    
                    state.currentCall.on('stream', function(remoteStream) {
                        handleRemoteStream(remoteStream);
                    });
                    
                    state.currentCall.on('close', function() {
                        handleRemoteDisconnect();
                    });
                    
                    state.currentCall.on('error', function(err) {
                        console.error('Call error:', err);
                        updateStatus("Call error: " + err.message);
                    });
                    
                    state.dataConnection = state.peer.connect(roomId);
                    setupDataConnection();
                });
                
                state.peer.on('error', function(err) {
                    console.error('Peer error:', err);
                    updateStatus("Error: " + err.message);
                });
            }

            function handleRemoteStream(remoteStream) {
                sounds.join.play();
                elements.remoteVideo.srcObject = remoteStream;
                elements.remoteVideoContainer.classList.remove('hidden');
                
                elements.remoteVideo.play().catch(function(e) {
                    console.log("Video play error:", e);
                });
                
                updateStatus((state.remoteUserName || 'Someone') + " joined");
            }

            function setupDataConnection() {
                state.dataConnection.on('open', function() {
                    const username = elements.username.value.trim() || "User";
                    state.dataConnection.send({
                        type: 'username',
                        username: username
                    });
                });
                
                state.dataConnection.on('data', function(data) {
                    if (data.type === 'username') {
                        state.remoteUserName = data.username;
                        elements.remoteUsername.textContent = state.remoteUserName;
                        addSystemMessage(state.remoteUserName + " joined the chat");
                    } else {
                        handleIncomingMessage(data.sender, data.message);
                    }
                });
                
                state.dataConnection.on('close', function() {
                    handleRemoteDisconnect();
                });
                
                state.dataConnection.on('error', function(err) {
                    console.error('Data connection error:', err);
                    updateStatus("Chat error: " + err.message);
                });
            }

            function handleIncomingMessage(sender, message) {
                if (document.hidden) {
                    showNotification("New message from " + sender);
                }
                sounds.message.currentTime = 0;
                sounds.message.play();
                addMessage(sender, message, false);
            }

            function handleRemoteDisconnect() {
                if (!state.remoteUserName) state.remoteUserName = "The other user";
                
                sounds.leave.currentTime = 0;
                sounds.leave.play();
                
                addSystemMessage(state.remoteUserName + " left the chat");
                resetRemoteVideo();
                elements.chatContainer.classList.remove('hidden');
                showNotification(state.remoteUserName + " left the call");
                
                state.remoteUserName = null;
            }

            function disconnect() {
                if (state.currentCall) {
                    state.currentCall.close();
                    state.currentCall = null;
                }
                
                if (state.dataConnection) {
                    state.dataConnection.close();
                    state.dataConnection = null;
                }
                
                if (state.peer) {
                    state.peer.destroy();
                    state.peer = null;
                }
                
                if (state.qualityMonitorInterval) {
                    clearInterval(state.qualityMonitorInterval);
                    state.qualityMonitorInterval = null;
                }
                
                resetRemoteVideo();
                toggleUI(false);
                updateStatus("Disconnected");
                addSystemMessage("You left the call");
                elements.chatContainer.classList.remove('hidden');
            }

            function toggleVideo() {
                if (!state.localStream) return;
                
                state.isVideoOn = !state.isVideoOn;
                const videoTracks = state.localStream.getVideoTracks();
                if (videoTracks.length > 0) {
                    videoTracks[0].enabled = state.isVideoOn;
                }
                
                elements.toggleVideo.classList.toggle('active', !state.isVideoOn);
                elements.toggleVideo.innerHTML = state.isVideoOn ? 
                    '<i class="fas fa-video"></i>' : '<i class="fas fa-video-slash"></i>';
                
                updateStatus("Video " + (state.isVideoOn ? 'enabled' : 'disabled'));
            }

            function toggleAudio() {
                if (!state.localStream) return;
                
                state.isAudioOn = !state.isAudioOn;
                const audioTracks = state.localStream.getAudioTracks();
                if (audioTracks.length > 0) {
                    audioTracks[0].enabled = state.isAudioOn;
                }
                
                elements.toggleAudio.classList.toggle('active', !state.isAudioOn);
                elements.toggleAudio.innerHTML = state.isAudioOn ? 
                    '<i class="fas fa-microphone"></i>' : '<i class="fas fa-microphone-slash"></i>';
                
                updateStatus("Audio " + (state.isAudioOn ? 'enabled' : 'disabled'));
            }

            function sendMessage() {
                const message = elements.messageInput.value.trim();
                if (!message) return;
                
                const sender = elements.username.value.trim() || "You";
                
                if (state.dataConnection && state.dataConnection.open) {
                    state.dataConnection.send({
                        sender: sender,
                        message: message
                    });
                    addMessage(sender, message, true);
                    elements.messageInput.value = '';
                } else {
                    alert("Chat connection not ready yet");
                }
            }

            function addMessage(sender, message, isLocal) {
                const messageDiv = document.createElement('div');
                messageDiv.className = 'message ' + (isLocal ? 'local-msg' : 'remote-msg');
                
                const senderDiv = document.createElement('div');
                senderDiv.className = 'msg-sender';
                senderDiv.textContent = sender;
                
                const textDiv = document.createElement('div');
                textDiv.textContent = message;
                
                const timeDiv = document.createElement('div');
                timeDiv.className = 'msg-time';
                timeDiv.textContent = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                
                messageDiv.appendChild(senderDiv);
                messageDiv.appendChild(textDiv);
                messageDiv.appendChild(timeDiv);
                
                elements.messages.appendChild(messageDiv);
                elements.messages.scrollTop = elements.messages.scrollHeight;
            }

            function addSystemMessage(message) {
                const messageDiv = document.createElement('div');
                messageDiv.className = 'system-msg';
                messageDiv.textContent = message;
                elements.messages.appendChild(messageDiv);
                elements.messages.scrollTop = elements.messages.scrollHeight;
            }

            function showNotification(message) {
                const notification = document.createElement('div');
                notification.className = 'notification';
                
                const icon = document.createElement('i');
                icon.className = 'notification-icon fas fa-bell';
                
                const text = document.createElement('span');
                text.textContent = message;
                
                notification.appendChild(icon);
                notification.appendChild(text);
                document.body.appendChild(notification);
                
                setTimeout(function() {
                    notification.remove();
                }, 3000);
            }

            function clearChat() {
                elements.messages.innerHTML = '';
            }

            function resetRemoteVideo() {
                if (elements.remoteVideo.srcObject) {
                    elements.remoteVideo.srcObject.getTracks().forEach(function(track) {
                        track.stop();
                    });
                    elements.remoteVideo.srcObject = null;
                }
                elements.remoteVideoContainer.classList.add('hidden');
                elements.remoteUsername.textContent = "Connecting...";
            }

            function toggleUI(isConnected) {
                elements.createBtn.classList.toggle('hidden', isConnected);
                elements.joinBtn.classList.toggle('hidden', isConnected);
                elements.disconnectBtn.classList.toggle('hidden', !isConnected);
                elements.chatContainer.classList.toggle('hidden', !isConnected);
            }

            function updateStatus(message) {
                elements.status.textContent = "Status: " + message;
            }

            // Start the application
            init();
        })();
    </script>
</body>
</html>
